export const projects = [
  {
    title: "OCR",
    lang: "pytorch",
    content: (
      <>
        Text Recognition - based on{" "}
        <a
          className="text-blue-700"
          href="https://github.com/clovaai/deep-text-recognition-benchmark"
          target="_blank"
          rel="noopener noreferrer"
        >
          TPS-ResNet-BiLSTM-Attn
        </a>
        <br />
        Text Detection - based on{" "}
        <a
          className="text-blue-700"
          href="https://github.com/clovaai/CRAFT-pytorch"
          target="_blank"
          rel="noopener noreferrer"
        >
          CRAFT
        </a>{" "}
        <br />
        Doc layout analysis - based on{" "}
        <a
          className="text-blue-700"
          href="https://arxiv.org/abs/2012.14740"
          target="_blank"
          rel="noopener noreferrer"
        >
          LayoutLMv2
        </a>
        {", "}
        <a
          className="text-blue-700"
          href="https://arxiv.org/abs/2104.08836"
          target="_blank"
          rel="noopener noreferrer"
        >
          LayoutXLM
        </a>
        <br />I developed OCR module of RPA(Robotic Process Automation) on my
        own for a company for 6 months. Trained by data generated by custom text
        recognition data generator and many other public datasets.
      </>
    ),
  },
  {
    title: "Smart Contracts",
    lang: "solidity",
    content: (
      <>
        Decentralized program on the ethereum blockchain. I made an anonymous
        chat app and ERC-20 token (supports minting and more functions).
      </>
    ),
  },
  {
    title: "Trading assistant",
    lang: "python",
    content: (
      <>
        Fetches data from binance api and tradingview, and shows customized
        indicators. Displays risk of current portfolio and calculates proper
        amount of each trade.
      </>
    ),
  },
  {
    title: "Virtual display AR app",
    lang: "swift",
    content: (
      <>
        {" "}
        Displays a virtual screen right next to a real monitor. Every time
        launched, the app loads saved world data of my room. (Showing actual
        content work in progress.)
      </>
    ),
  },
  {
    title: "Medical report generation",
    lang: "pytorch",
    content: (
      <>
        {" "}
        Team project from CS470 course. Image-to-text model trained by a
        diagnostic report for each medical image. Beyond reimplementing{" "}
        <a
          className="text-blue-700"
          href="https://arxiv.org/abs/2010.10042"
          target="_blank"
          rel="noopener noreferrer"
        >
          baseline paper
        </a>
        , we analyzed how the results change depending on the two rewards (which
        encourage the factual completeness and consistency) and other models.
      </>
    ),
  },
  {
    title: "Home server",
    lang: "",
    content: (
      <>
        {" "}
        Ubuntu server on raspberry pi. Uses next.js, homeassistant (api),
        traefik, pihole, wireguard.
        <ul>
          <li>- Dashboard that shows iot devices and server status</li>
          <li>- Control page of home resources</li>
          <li>- VPN to connect home network from outside</li>
        </ul>
      </>
    ),
  },
  {
    title: "This homepage",
    lang: "nextjs, tailwind",
    content: <>Deployed by github pages and vercel.</>,
  },
];
